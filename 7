#include <iostream>
#include<string>
using namespace std;

class Exception
{
private:
	int error;

public:
	Exception()
	{
		error = 0;
	}
	Exception(int error)
	{
		this->error = error;
		what();
	}
	void what()
	{
		if (error == 1)
		{
			std::cout << "Ring iz empty" << std::endl;
		}
		if (error == 2)
		{
			std::cout << "Nophing was founded" << std::endl;
		}
		if (error == 3)
		{
			std::cout << "pointer is empty" << std::endl;
		}
	}
};

class ctask
{
private:
	static int default_id;
    int id;
	string name;
	float rate;
public:

	ctask(string name, float rate) 
	{
		default_id++;
		this->id = default_id;
		this->name = name;
		this->rate = rate;
	}

	ctask()
	{
		default_id++;
		id = default_id;
		name = "Task";
		rate=0.0;
	}

	ctask(string nname) {
		default_id++;
		name = nname;
		this->id = default_id;
		rate = 0.0;
	}
	
	void output(){cout << "\nId - " << id << "\nName - " << name << "\nRate - " << rate << endl;}

	bool operator< (ctask& c2) const
	{
		if (name < c2.name)   return true;
		else return false;
	}
	bool operator> (ctask& c2) const
	{
		if (name > c2.name)   return true;
		else return false;
	}

	bool operator== (ctask& c2) {
		if (name > c2.name || name < c2.name)return false;
		else return true;
	}

	friend ostream& operator<<(ostream& out, const ctask c);
};
int ctask::default_id = 0;
ostream& operator<<(ostream& out, const ctask c){cout << "\nId - " << c.id << "\nName - " << c.name << "\nRate - " << c.rate << endl;
return out;
}


template <typename T>
class  Node
{
	
	Node* nexta;
public:
	Node* getnexta() {
		return nexta;
	};
	void setnexta(Node* nexta) { this->nexta = nexta; }
	T data;
	Node() : data(), nexta(nullptr) { }
	Node(T d) : data(d), nexta(nullptr) { }
};


template<class T>
class Ring
{
private:
	Node<T>* head;
	int size;
public:
	Ring() :head(nullptr), size(0) {}
	void add(T input)
	{
		if (head == nullptr) {
			Node<T>* element = new Node<T>(input);
			element->setnexta(head);
			head = element;
			size++;
		}
		else
		{
			Node<T>* tmp = head;
			int i = 0;
			while (i < size - 1) { tmp = tmp->getnexta(); i++; }
			tmp->setnexta(new Node<T>(input));
			tmp = tmp->getnexta();
			tmp->setnexta(head);
			size++;
		}
	}
	void mydelete()
	{
		if (size == 0)
			throw 1;
		Node<T>* tmp = head;
		head = head->getnexta();
		delete tmp;
		size--;
		Node<T>* t = head;
		int i = 0;
		while (i < size - 1)
		{
			t = t->getnexta();
			i++;
		}
		t->setnexta (head);

	}
	void output()
	{
		if (size == 0)
			throw Exception();
		Node<T>* temp = head;
		int i = 0;
		while (i < size)
		{
			cout << "   " << temp->data;
			temp = temp->getnexta();
			i++;
		}
	}
	void twice_output() {
		if (size == 0)
			throw Exception();
		Node<T>* temp = head;
		int i = 0;
		while (i < 2*size)
		{
			cout << "   " << temp->data;
			temp = temp->getnexta();
			i++;
		}
	}
	Node<T>* get_node() {
		return head;
	}
	int get_size() {
		return size;
	}

};

template<class T>
class Iterator
{
private:
	Node<T>* node;
	int size;
	int current;
public:
	friend Ring<T>;
	Iterator(Ring<T>* element) : current(0)
	{
		node = element->get_node();
		size = element->get_size();
	}
	void begin()
	{
		if (size == 0)
			throw 1;
		if (current != 0)
		{
			while (current < size-1)
			{
				current++;
				node = node->getnexta();
			}
			current = 0;
		}

	}
	void search(T searched)
	{
		if (size == 0)
			throw 1;
		int i = 0;
		while (i < size)
		{
			if (!(searched > node->data) && !(searched < node->data))
			{
				cout << "\nHere it is\n " << node->data <<endl;
				return;
			}
			if (current == size - 1)
				current = 0;
			else
		    current++;
			node = node->getnexta();
			i++;
		}
		cout << "\n Nothing was founded" << endl;
		throw 2;
	}
	Iterator& operator++()
	{
		if (size == 0)
			throw Exception();
		if (size == 1)
			current = 0;
		else
			current++;
		node = node->nexta;
		return *this;
	}
	T operator*() {
		return node->data;
	}
	void operator = (T x)
	{
		if (size == 0) throw 1;
		node->data = x;
	}
	Iterator& operator[](int index)
	{
		if (size == 0) throw 1;
		if (index > size) throw 3;
		Node<T>* tmp = node;
		while (1)
		{
			if (current == index)
			{
				node = tmp;
				return *this;
			}
			tmp = tmp->getnexta();
			if (current == size - 1)
				current = 0;
			else
				current++;
		}
	}
	void shell()
	{
		T temp;
		if (size == 0)
			throw Exception();
		int step, i, j;
		for (step = size / 2; step > 0; step /= 2)
			for (i = step; i < size; i++)
				for (j = i - step; j >= 0 && (*this)[j].node->getnexta()->data > ((*this)[j + step]).node->getnexta()->data; j -= step)
				{
					temp = (*this)[j].node->getnexta()->data;
					(*this)[j].node->getnexta()->data = ((*this)[j + step]).node->getnexta()->data;
					(*this)[j + step].node->getnexta()->data = temp;
				}
	}
};



int main()
{

	Ring<ctask> ring;
	try
	{
		ring.mydelete();
	}
	catch (int exIndex) {
		Exception ex(exIndex);
		ex.what();
	}


	ring.add(ctask("First task", 3.4));
	ring.add(ctask("Second task", 5.6));
	ring.add(ctask("Third task", 7.8));
	ring.add(ctask("Fourth task", 9.8));
	ring.add(ctask("Fifth task", 5.0));
	try
	{
		ring.output();
	
		Iterator<ctask> I(&ring);
		cout << "\nAfter sorting"  << endl;

		I.begin();
		I.shell();
		ring.output();

		cout << "\nAfter deleting the first" << endl;
	
		ring.mydelete();
		ring.output();
	
		cout << "\nAfter deleting the first" << endl;
		ring.mydelete();
		ring.output();
		
		I.begin();
		string name;
		cout << "find watt? Input name of the task"<<endl;
		getline(cin, name);
		I.search(ctask(name));
		cout <<endl << "find watt? Input name of the task"<<endl;
		getline(cin, name);
		I.search(ctask(name));
	}
	catch (int exIndex) {
		Exception ex1(exIndex);
		ex1.what();
	}
	try
	{
		ring.twice_output();
	}
	catch (int exIndex) {
		Exception ex1(exIndex);
		ex1.what();
	}
}
