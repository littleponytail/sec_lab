#include <iostream>
#include <fstream>
#include <string>
#include <io.h>
#include <stdio.h>
#include <filesystem>



using namespace std;

class File;

class Competitor {
	int team_num;
	string name;
	int age;
	double weight;

	friend File;
public:
	Competitor(string name, int team_num, int age, double weight) {
		this->name = name;
		this->team_num = team_num;
		this->weight = weight;
		this->age = age;
	}
	Competitor() {};
	void PrintInfo() {
		cout << "Name: " << name << endl;
		cout << "Number: " << team_num << endl;
		cout << "Weight: " << weight << endl;
		cout << "Age: " << age << endl;
	}
	bool operator <(Competitor& other) {
		if (this->team_num < other.team_num) {
			return true;
		}
		else {
			return false;
		}
	}

	bool operator >(Competitor& other) {
		if (this->team_num > other.team_num) {
			return true;
		}
		else {
			return false;
		}
	}

	bool operator ==(Competitor& other) {
		if (this->team_num == other.team_num) {
			return true;
		}
		else {
			return false;
		}
	}

	bool operator !=(Competitor& other) {
		if (this->team_num != other.team_num) {
			return true;
		}
		else {
			return false;
		}
	}

	friend std::ostream& operator<<(std::ostream& out, const Competitor& shoes);
	
};

class Exception
{
private:
	int error;

public:
	Exception()
	{
		error = 0;
	}
	Exception(int error)
	{
		this->error = error;
	}
	void error_info()
	{
		if (error == 1)
		{
			cout << "Cant insert Dublicate!" << endl;
		}
		if (error == 2)
		{
			cout << "No such value!" << endl;
		}
		if (error == 3)
		{
			cout << "Pointer is empty" <<endl;
		}
		if (error == 4)
		{
			cout << "File wasn`t open" << endl;
		}
		if (error==5)
		{
			cout << "Ring is empty" << endl;
		}
		if (error == 6)
		{
			cout << "Nophing was founded" << endl;
		}
	} 	
	void check_rerror(int error) {
		this->error = error;
		error_info();
	}
};

template <class T>
class Iterator;
template <class T>
class Ring;

template <typename T>
class  Node
{

	Node* nexta;
public:
	Node* getnexta() {
		return nexta;
	};
	void setnexta(Node* nexta) { this->nexta = nexta; }
	T data;
	Node() : data(), nexta(nullptr) { }
	Node(T d) : data(d), nexta(nullptr) { }
};


template<class T>
class Ring
{
private:
	Node<T>* head;
	int size;
public:
	Ring() :head(nullptr), size(0) {}
	void add(T input)
	{
		if (head == nullptr) {
			Node<T>* element = new Node<T>(input);
			element->setnexta(head);
			head = element;
			size++;
		}
		else
		{
			Node<T>* tmp = head;
			int i = 0;
			while (i < size - 1) { tmp = tmp->getnexta(); i++; }
			tmp->setnexta(new Node<T>(input));
			tmp = tmp->getnexta();
			tmp->setnexta(head);
			size++;
		}
	}
	void mydelete()
	{
		if (size == 0)
			throw 5;
		Node<T>* tmp = head;
		head = head->getnexta();
		delete tmp;
		size--;
		Node<T>* t = head;
		int i = 0;
		while (i < size - 1)
		{
			t = t->getnexta();
			i++;
		}
		t->setnexta(head);

	}
	void output()
	{
		if (size == 0)
			throw 5;
		Node<T>* temp = head;
		int i = 0;
		while (i < size)
		{
			cout << "   " << temp->data;
			temp = temp->getnexta();
			i++;
		}
	}
	void twice_output() {
		if (size == 0)
			throw 5;
		Node<T>* temp = head;
		int i = 0;
		while (i < 2 * size)
		{
			std::cout << "   " << temp->data;
			temp = temp->getnexta();
			i++;
		}
	}
	Node<T>* get_node() {
		return head;
	}
	int get_size() {
		return size;
	}

};

template<class T>
class Iterator
{
private:
	Node<T>* node;
	int size;
	int current;
public:
	friend Ring<T>;
	Iterator(Ring<T>* element) : current(0)
	{
		node = element->get_node();
		size = element->get_size();
	}
	void begin()
	{
		if (size == 0)
			throw 5;
		if (current != 0)
		{
			while (current < size)
			{
				current++;
				node = node->getnexta();
			}
			current = 0;
		}

	}
	void end() {
		if (size == 0)
			throw 5;
		if (current != 0)
		{
			while (current < size)
			{
				current++;
				node = node->getnexta();
			}
			current = 0;
		}
	}
	void search(T searched)
	{
		if (size == 0)
			throw 5;
		int i = 0;
		while (i < size)
		{
			if (!(searched > node->data) && !(searched < node->data))
			{
				std::cout << "\nHere it is\n " << node->data << endl;
				return;
			}
			if (current == size - 1)
				current = 0;
			else
				current++;
			node = node->getnexta();
			i++;
		}
		/*std::cout << "\n Nothing was founded" << endl;*/
		throw 6;
	}
	Iterator& operator++()
	{
		if (size == 0)
			throw 5;
		if (size == 1)
			current = 0;
		else
			current++;
		node=node->getnexta();
		return *this;
	}
	T operator*() {
		return node->data;
	}
	void operator = (T x)
	{
		if (size == 0) throw 5;
		node->data = x;
	}
	Iterator& operator[](int index)
	{
		if (size == 0) throw 5;
		if (index > size) throw 3;
		Node<T>* tmp = node;
		while (1)
		{
			if (current == index)
			{
				node = tmp;
				return *this;
			}
			tmp = tmp->getnexta();
			if (current == size - 1)
				current = 0;
			else
				current++;
		}
	}
	T GetValue() {
		if (node == nullptr) {
			throw 3;
		}
		return node->data;
	}
	void shell()
	{
		T temp;
		if (size == 0)
			throw 1;
		int step, i, j;
		for (step = size / 2; step > 0; step /= 2)
			for (i = step; i < size; i++)
				for (j = i - step; j >= 0 && (*this)[j].node->getnexta()->data > ((*this)[j + step]).node->getnexta()->data; j -= step)
				{
					temp = (*this)[j].node->getnexta()->data;
					(*this)[j].node->getnexta()->data = ((*this)[j + step]).node->getnexta()->data;
					(*this)[j + step].node->getnexta()->data = temp;
				}
	}
};

class File {
	string path;
	fstream file;
	int Count_el_amount();
	
public:
	File(string filePath);
	void get_bin_el(Competitor& comp);
	void text_read();
	void write_text(const Competitor& comp);
	void read_bin();
	void read_bin(int);
	void write_bin(const Competitor& comp);
	void sort_weight();
	void Num_sort();
	void age_sort();
	void name_sort();
	bool name_sort(string);
	int DelByName(string name);
	void FindByName(string name);
	
};

int main() {
	File file1("T1.txt");
	File file2("T2.txt");
	File file3("B.bin");
	Exception ex;
	string name;

	Ring<Competitor> ring;
	ring.add(Competitor("Andrew", 2, 35, 87));
	ring.add(Competitor("Nick", 1, 25, 98));
	ring.add(Competitor("Mike", 1, 30, 89));
	ring.add(Competitor("Alex", 12, 40, 105));
	ring.add(Competitor("Vova", 13, 40, 100));
	Iterator<Competitor> it(&ring);
	int place = 0;
	while (1) {
		place++;
		if (place==ring.get_size()) {
			file1.write_text(it.GetValue());
			break;
		}
		file1.write_text(it.GetValue());
		++it;
	}

	it.begin();
	place = 0;
	while (1) {
		place++;
		if (place == ring.get_size()) {
			file2.write_bin(it.GetValue());
			break;
		}
		file2.write_bin(it.GetValue());
		++it;
	}

	it.begin();
	place = 0;
	while (1) {
		place++;
		if (place == ring.get_size()) {
			file3.write_bin(it.GetValue());
			break;
		}
		file3.write_bin(it.GetValue());
		++it;
	}

    cout <<endl << "Text text format:" <<endl;
	file1.text_read();
	cout <<endl<< "Text bin format:" <<endl;
	file2.read_bin();
	cout<<endl << "Bin File:" << endl;
	file3.read_bin();
	file3.name_sort();
	cout<<endl << "After sorting by name:" <<endl;
	file3.Num_sort();
	file3.read_bin();
	cout <<endl<< "After sorting by num:" << endl;
	file3.read_bin();
	try {
		cout << endl << "Find watt? Input name pls" << endl;
		getline(cin, name);
		cout << endl << "Find by name:" << endl;
	file3.FindByName(name);	 }
	catch (int error_num) {
		ex.check_rerror(error_num);	
	}
	system("pause");
	int size;
	size = file3.DelByName("Mike"); 
	/*FILE* output;
	fopen_s(&output, "B.bin", "wb");
	_chsize(_fileno(output), 122);
	fclose(output);*/
	//File file4("B.bin");
	cout<<endl << "After deliting:" << endl;
	file3.read_bin(size);
	
}

void File::get_bin_el(Competitor& temp) {
	int len, beg;
	file.read((char*)&temp.team_num, sizeof(int));
	file.read((char*)&temp.age, sizeof(int));
	file.read((char*)&temp.weight, sizeof(double));
	file.read((char*)&len, sizeof(int));
	char* nam = new char[len + 1];
	file.read(nam, len);
	nam[len] = '\0';
	temp.name = nam;

	delete[] nam;
}
int File::DelByName(string name) {
	name_sort(name);
	int size = 0, size2, size3;
    file.open(path, std::ios::in | std::ios::binary);
    if (!file.is_open()) {
		throw 4;
	}
	file.seekg(0, ios::end);
	int fileSize = file.tellg();
	file.seekg(0, ios::beg);
	Competitor next, next1;
	get_bin_el(next);
	while (file.tellg() < fileSize) {
		
		size2 = file.tellg();
		get_bin_el(next1);
		size3 = file.tellg();
		size++;
	}
	/*fopen_s(&output, "B.bin", "wb");
	_chsize(_fileno(output), 98);
	fclose(output);*/
	/*while(file.tellg() < fileSize) {
	file.write(" ",2);
	size2++;
	}*/
	//write(file, buf, 0);
	file.close();
	return size2;
}


void File::Num_sort() {
	int fileSize = Count_el_amount();

	try {
		file.open(path, std::ios::in | std::ios::out | std::ios::binary);
		if (!file.is_open()) {
			throw 4;
		}
	}
	catch (int index) {
		Exception ex(index);
		ex.error_info();
		return;
	}

	Competitor cur, next;
	int curPos, nextPos;
	for (int i = 0; i < fileSize; i++) {
		for (int j = 0; j < fileSize - 1; j++) {
			curPos = file.tellg();
			get_bin_el(cur);
			nextPos = file.tellg();
			get_bin_el(next);

			if (cur.team_num > next.team_num) {
				file.seekp(curPos, std::ios::beg);

				file.write((char*)&next.team_num, sizeof(int));
				file.write((char*)&next.age, sizeof(int));
				file.write((char*)&next.weight, sizeof(double));
				int len = next.name.length();
				file.write((char*)&len, sizeof(int));
				file.write(next.name.data(), len);
				nextPos = file.tellp();

				file.write((char*)&cur.team_num, sizeof(int));
				file.write((char*)&cur.age, sizeof(int));
				file.write((char*)&cur.weight, sizeof(double));
				len = cur.name.length();
				file.write((char*)&len, sizeof(int));
				file.write(cur.name.data(), len);
			}
			file.seekg(nextPos, std::ios::beg);
		}
		file.seekg(0, std::ios::beg);
	}
	file.close();
}

void File::age_sort() {
	int fileSize = Count_el_amount();

	try {
		file.open(path, std::ios::in | std::ios::out | std::ios::binary);
		if (!file.is_open()) {
			throw 4;
		}
	}
	catch (int index) {
		Exception ex(index);
		ex.error_info();
		return;
	}
	Competitor cur, next;
	int curPos, nextPos;
	for (int i = 0; i < fileSize; i++) {
		for (int j = 0; j < fileSize - 1; j++) {
			curPos = file.tellg();
			get_bin_el(cur);
			nextPos = file.tellg();
			get_bin_el(next);


			if (cur.age > next.age) {
				file.seekp(curPos, std::ios::beg);

				file.write((char*)&next.team_num, sizeof(int));
				file.write((char*)&next.age, sizeof(int));
				file.write((char*)&next.weight, sizeof(double));
				int len = next.name.length();
				file.write((char*)&len, sizeof(int));
				file.write(next.name.data(), len);
				nextPos = file.tellp();

				file.write((char*)&cur.team_num, sizeof(int));
				file.write((char*)&cur.age, sizeof(int));
				file.write((char*)&cur.weight, sizeof(double));
				len = cur.name.length();
				file.write((char*)&len, sizeof(int));
				file.write(cur.name.data(), len);
			}
			file.seekg(nextPos, std::ios::beg);
		}
		file.seekg(0, std::ios::beg);
	}
	file.close();
}

void File::name_sort() {
	int fileSize = Count_el_amount();

	try {
		file.open(path, std::ios::in | std::ios::out | std::ios::binary);
		if (!file.is_open()) {
			throw 4;
		}
	}
	catch (int index) {
		Exception ex(index);
		ex.error_info();
		return;
	}

	Competitor cur, next;
	int curPos, nextPos;
	for (int i = 0; i < fileSize; i++) {
		for (int j = 0; j < fileSize - 1; j++) {
			curPos = file.tellg();
			get_bin_el(cur);
			nextPos = file.tellg();
			get_bin_el(next);


			if (std::strcmp(next.name.c_str(), cur.name.c_str()) < 0) {
				file.seekp(curPos, std::ios::beg);

				file.write((char*)&next.team_num, sizeof(int));
				file.write((char*)&next.age, sizeof(int));
				file.write((char*)&next.weight, sizeof(double));
				int len = next.name.length();
				file.write((char*)&len, sizeof(int));
				file.write(next.name.data(), len);
				nextPos = file.tellp();

				file.write((char*)&cur.team_num, sizeof(int));
				file.write((char*)&cur.age, sizeof(int));
				file.write((char*)&cur.weight, sizeof(double));
				len = cur.name.length();
				file.write((char*)&len, sizeof(int));
				file.write(cur.name.data(), len);
			}
			file.seekg(nextPos, std::ios::beg);
		}
		file.seekg(0, std::ios::beg);
	}
	file.close();
}

bool File::name_sort(string name) {
	int fileSize = Count_el_amount();
	bool exicst = false;
	try {
		file.open(path, std::ios::in | std::ios::out | std::ios::binary);
		if (!file.is_open()) {
			throw 4;
		}
	}
	catch (int index) {
		Exception ex(index);
		ex.error_info();
		return false;
	}

	Competitor cur, next;
	int curPos, nextPos;
	for (int i = 0; i < fileSize; i++) {
		for (int j = 0; j < fileSize - 1; j++) {
			curPos = file.tellg();
			get_bin_el(cur);
			nextPos = file.tellg();
			get_bin_el(next);


			if ( cur.name.c_str()==name) {
				exicst = true;
				file.seekp(curPos, std::ios::beg);

				file.write((char*)&next.team_num, sizeof(int));
				file.write((char*)&next.age, sizeof(int));
				file.write((char*)&next.weight, sizeof(double));
				int len = next.name.length();
				file.write((char*)&len, sizeof(int));
				file.write(next.name.data(), len);
				nextPos = file.tellp();

				file.write((char*)&cur.team_num, sizeof(int));
				file.write((char*)&cur.age, sizeof(int));
				file.write((char*)&cur.weight, sizeof(double));
				len = cur.name.length();
				file.write((char*)&len, sizeof(int));
				file.write(cur.name.data(), len);
			}
			file.seekg(nextPos, std::ios::beg);
		}
		file.seekg(0, std::ios::beg);
	}
	file.close();
	return exicst;
}

void File::sort_weight() {
	int fileSize = Count_el_amount();

	try {
		file.open(path, std::ios::in | std::ios::out | std::ios::binary);
		if (!file.is_open()) {
			throw 4;
		}
	}
	catch (int index) {
		Exception ex(index);
		ex.error_info();
		return;
	}
	Competitor cur, next;
	int curPos, nextPos;
	for (int i = 0; i < fileSize; i++) {
		for (int j = 0; j < fileSize - 1; j++) {
			curPos = file.tellg();
			get_bin_el(cur);
			nextPos = file.tellg();
			get_bin_el(next);

			if (cur.weight > next.weight) {
				file.seekp(curPos, std::ios::beg);

				file.write((char*)&next.team_num, sizeof(int));
				file.write((char*)&next.age, sizeof(int));
				file.write((char*)&next.weight, sizeof(double));
				int len = next.name.length();
				file.write((char*)&len, sizeof(int));
				file.write(next.name.data(), len);
				nextPos = file.tellp();

				file.write((char*)&cur.team_num, sizeof(int));
				file.write((char*)&cur.age, sizeof(int));
				file.write((char*)&cur.weight, sizeof(double));
				len = cur.name.length();
				file.write((char*)&len, sizeof(int));
				file.write(cur.name.data(), len);
			}
			file.seekg(nextPos, std::ios::beg);
		}
		file.seekg(0, std::ios::beg);
	}
	file.close();
}


std::ostream& operator<<(std::ostream& out, const Competitor& comp) {
	out << "Name: " << comp.name << std::endl;
	out << "Number: " << comp.team_num << std::endl;
	out << "Weight: " << comp.weight << std::endl;
	out << "Age: " << comp.age << std::endl;
	return out;
}

File::File(string path) {
	this->path = path;
	file.open(path, ios::out | ios::trunc);
	file.close();
}

void File::text_read() {

	try {
		file.open(path, ios::in);
		if (!file.is_open()) {
			throw 4;
		}
	}
	catch (int index) {
		Exception ex(index);
		ex.error_info();
		return;
	}

	std::string data;
	while (std::getline(file, data)) {
		std::cout << data << std::endl;
	}
	file.close();
}

void File::write_text(const Competitor& comp) {
	try {
		file.open(path, std::ios::out | std::ios::app);
		if (!file.is_open()) {
			throw 4;
		}
	}
	catch (int index) {
		Exception ex(index);
		ex.error_info();
		return;
	}

	file << comp;
	file.close();
}

void File::FindByName(string name) {
	int fileSize = Count_el_amount();

	try {
		file.open(path, ios::in | ios::binary);
		if (!file.is_open()) {
			throw 4;
		}
	}
	catch (int index) {
		Exception ex(index);
		ex.error_info();
		return;
	}

	Competitor temp;
	for (int i = 0; i < fileSize; i++) {
		get_bin_el(temp);
		if (std::strcmp(temp.name.data(), name.data()) == 0) {
			std::cout << temp << std::endl;
			return;
		}
	}

	file.close();
	throw 6;
}



void File::read_bin() {
	int fileSize = Count_el_amount();

	try {
		file.open(path, std::ios::in | std::ios::binary);
		if (!file.is_open()) {
			throw 4;
		}
	}
	catch (int index) {
		Exception ex(index);
		ex.error_info();
		return;
	}

	Competitor temp;
	file.seekg(0, ios::end);
	int size = file.tellg();
	file.seekg(0, ios::beg);
	while (file.tellg() < size) {
		get_bin_el(temp);
		std::cout << temp << std::endl;
	}

	file.close();
}
void File::read_bin(int size) {

	try {
		file.open(path, ios::in | ios::binary);
		if (!file.is_open()) {
			throw 4;
		}
	}
	catch (int index) {
		Exception ex(index);
		ex.error_info();
		return;
	}

	Competitor temp;
	file.seekg(0, std::ios::beg);
	while (file.tellg() < size) {
		get_bin_el(temp);
		std::cout << temp << std::endl;
	}

	file.close();
}
void File::write_bin(const Competitor& comp) {
	try {
		file.open(path, std::ios::out | std::ios::app | std::ios::binary);
		if (!file.is_open()) {
			throw 4;
		}
	}
	catch (int index) {
		Exception ex(index);
		ex.error_info();
		return;
	}

	file.write((char*)&comp.team_num, sizeof(int));
	file.write((char*)&comp.age, sizeof(int));
	file.write((char*)&comp.weight, sizeof(double));
	int len = comp.name.length();
	file.write((char*)&len, sizeof(int));
	file.write(comp.name.data(), len);
	file.close();
}



int File::Count_el_amount() {
	int size = 0;

	try {
		file.open(path, std::ios::in | std::ios::binary);
		if (!file.is_open()) {
			throw 4;
		}
	}
	catch (int index) {
		Exception ex(index);
		ex.error_info();
		return 0;
	}
	file.seekg(0, std::ios::end);
	int fileSize = file.tellg();
	file.seekg(0, std::ios::beg);

	while (file.tellg() < fileSize) {
		Competitor temp;
		get_bin_el(temp);
		size++;
	}

	file.close();
	return size;
}
