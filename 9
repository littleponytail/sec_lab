#include <iostream>
#include <fstream>
#include <string>
#include <list>
#include <iterator>



using namespace std;
class ctask;
	class Algorithm
	{
	public:
		void first_task();
		void second_task(list<ctask>::iterator begin, std::list<ctask>::iterator end);
		void third_task(list<ctask>::iterator begin, std::list<ctask>::iterator end);
	};
	
	
	class Exception
	{
	protected:
		int error;
	public:
		Exception()
		{
			error = 0;
		}
		Exception(int _error)
		{
			error = _error;
		}
		~Exception() { };
		void what()
		{
			if (this->error == 1)
			{
				cout << "File isn't open!" << endl;
			}
			if (this->error == 2)
			{
				cout << "List is empty!" << endl;
			}
			if (error == 3) {
				cout << "EOF" << endl;
			}
			if (error == 4) {
				cout << "Invalid input" << endl;
			}
		}

		void check_rerror(int error) {
			this->error = error;
		}
	};

		class ctask
		{
		private:
			static int default_id;
			int id;
			string name;
			int rate;
		public:

			ctask(string name, float rate)
			{
				default_id++;
				this->id = default_id;
				this->name = name;
				this->rate = rate;
			}

			ctask()
			{
				default_id++;
				id = default_id;
				name = "Task";
				rate = 0.0;
			}

			ctask(string nname) {
				default_id++;
				name = nname;
				this->id = default_id;
				rate = 0.0;
			}

			void output() { cout << "\nId - " << id << "\nName - " << name << "\nRate - " << rate << endl; }

			bool operator< (ctask& c2) const
			{
				if (name < c2.name)   return true;
				else return false;
			}
			bool operator> (ctask& c2) const
			{
				if (name > c2.name)   return true;
				else return false;
			}

			bool operator== (ctask& c2) {
				for (int i = 0; i < c2.name.length(); i++)
				{
					if (name[i] != c2.name[i] || name.length() != c2.name.length()) { return false; }
				}
				return true;
			}
			void set_information(std::string n, float r)
			{
				id = default_id;
				default_id++;
				this->name = n;
				this->rate = r;
			}
			bool set_from_file() {};
			int cget_id() {
				return this->id;
			}

			string get_name() {
				return this->name;
			}

			int get_rate() {
				return this->rate;
			}

			friend ostream& operator<<(ostream& out, const ctask c);
		};
	
		
	int ctask::default_id = 0;
		ostream& operator<<(ostream& out, const ctask c) {
			cout << "\nId - " << c.id << "\nName - " << c.name << "\nRate - " << c.rate << endl;
			return out;
		}
	

	bool operator>=(ctask T1, int chislo) {
		if (T1.get_rate() >= chislo) {
			return true;
		}
		else {
			return false;
		}
	}

	void Algorithm::first_task() {
		std::ifstream file; int fl = 0;
		char c;
		std::string str;
		file.open("C:\\Users\\master\\Desktop\\kf,s\\T1.txt");
		try {
			if (!file.is_open())
			{
				throw 1;
			}
		}
		catch (int i)
		{
			Exception ex(i);
			ex.what();
			return;
		}
		while (!file.eof()) {
			file.get(c);
			if (c == '(') {
				fl++;
			}
			else if (c == ')') {
				fl--;
			}
			if (fl < 0 ) {
				cout << "wrong brackets" << endl;
				file.close();
				return;

			}
		}
		if (fl!=0)	 cout << "wrong brackets" << endl;
		else cout << "correct brackets" << endl;
		file.close();
	}

	void Algorithm::second_task(list<ctask>::iterator begin, list<ctask>::iterator end) {
		cout << "Algorithm 2 " << endl;
		int i1 = 0;
		int i2 = 0;
		while (begin != end) {
			if (begin == end) break;
			if (*begin >= 50) {
				i2++;
			}
			begin++;
			i1++;
		}
		
	    cout <<i2<< " tasks with rate wich is more than 50" << endl;
	   cout <<i1-i2<< " tasks with rate wich is less than 50" << endl;
		
	}
	void Algorithm::third_task(list<ctask>::iterator begin, list<ctask>::iterator end) {
		cout << "Algorithm 3 " << endl;
		while (begin != end) {
			if (*begin >= 50) {
				std::cout << *begin;
			}
			begin++;
			if (begin == end) break;
		}
	}

	int main() {
		Algorithm alg;
		std::list<ctask> tasks;
		std::ifstream file;
		Exception ex;
		tasks.push_back(ctask("First_task", 76));
		tasks.push_back(ctask("Second_task", 97));
		tasks.push_back(ctask("Third_task", 90));
		tasks.push_back(ctask("Fourth_task", 75));

		std::cout << "Algoritm 1\n";
		alg.first_task();
		std::cout << endl;
		alg.second_task(tasks.begin(), tasks.end());
		alg.third_task(tasks.begin(), tasks.end());
	
		file.open("C:\\Users\\master\\Desktop\\kf,s\\First.txt");
		try {
			if (!file.is_open())
			{
				throw 1;
			}
		}
		catch (int i)
		{
			 ex.check_rerror(i);
			ex.what();
			return 0;
		}
		string task_name;
		string task_rate;
		list<ctask> list;
		char c;
		int rate = 0;
		while (!file.eof()) {
			try {
				rate = 0;
				do {
					file.get(c);
					task_name += c;
				} while (c != ' ' && c != '\n');
				do {
					file.get(c);
					if (c == '\n' || c == ' ') break;
					if (c > '9' || c< '0')throw 4;
					rate *= 10;
					rate += c - '0';
				} while (true);
			}
			catch (int i) {
				ex.check_rerror(i);
				ex.what();
				return 0;
			}
			if (file.eof()) break;
			ctask T(task_name, rate);
			task_name.clear();
			task_rate.clear();
			list.push_back(T);
		}
		file.close();
		try {
			if (list.size() <= 0)
			{
				throw 2;
			}
		}
		catch (int i)
		{
			ex.check_rerror(i);
			ex.what();
			return 0;
		}
		std::list<ctask>::iterator It;
		It = list.begin();
		cout << endl << "Readed from file" << endl;
		while (It != list.end())
		{
			std::cout << *It;
			It++;
		}
		alg.second_task(It = list.begin(), It = list.end());
		alg.third_task(It = list.begin(), It = list.end());
		return 0;
		
	}
