#include<iostream>
#include<string>
#include<iomanip>

using namespace std;

class human {
protected:
	string name;
	int age;
public:
	human() {
		name = "FIO";
		age = 0;
	};
	human(string name, int age) {
		this->name = name;
		this->age = age;
	}
	void set_name(string name) {
		this->name = name;
	}
	void set_age(int age) {
		this->age = age;
	}
	int get_age() { return age; }
	void virtual output() = 0;
	void virtual raschet() = 0;
	virtual ~human() {};
};

class skater :public virtual human {
	int experience;
	float skill;
public:
	skater() : human() {
		experience = 0;
		skill = 0.0;
	};
	skater(float skill, int experience, bool married, int children_amount, string name, int age) :human() {
		this->skill = skill;
		this->experience = experience;
	}
	void set_experience(int experience) {
		this->experience = experience;
	}
	void set_skill(float skill) {
		this->skill = skill;
	}
	void output() override {
		cout << setw(20) << "Name" << setw(17) << "Age" << setw(5) << endl << name << setw(20) << age << setw(17) << endl;
		cout << "Class adult_skater:" << endl << setw(20) << "Skill info" << setw(17) << "Experience info" << endl << skill << setw(20) << experience << setw(17) << endl;
	}
	void  raschet() override { cout << "Rashet skill/experience" << skill / experience << endl; }
	~skater() override {};
};

class sportsman : public virtual human {
protected:
	string sportname;
	int level;
public:
	sportsman() : human() {
		level = 0;
		sportname = "Sport";
	};
	sportsman(string sportname, int level, string name, int age) : human(name, age) {
		this->sportname = sportname;
		this->level = level;
	}
	void set_sportname(string sportname) {
		this->sportname = sportname;
	}
	void set_level(int level) {
		this->level = level;
	}
	void  raschet() override { cout << "Rachet sportname`s length + level: " << sportname.length() + level << endl; }
	void  output() override {
		cout << setw(20) << "Name" << setw(17) << "Age" << setw(5) << endl << name << setw(20) << age << setw(17) << endl;
		cout << "Class sportsman:" << endl << setw(20) << "Sport`s name" << setw(17) << "Level info" << endl << sportname << setw(20) << level << setw(17) << endl;
	}
	~sportsman() override {};
};

class hockey_player : public sportsman {
	int team_number;
	string country;

public:
	hockey_player() :sportsman() {
		team_number = 0;
		country = "Country";
	}
	hockey_player(int team_number, string country, string sportname, int level, string name, int age) : sportsman(sportname, level, name, age) {
		this->team_number = team_number;
		this->country = country;
	}
	void set_country(string country) {
		this->country = country;
	}
	void set_team_number(int team_number) {
		this->team_number = team_number;
	}
	void raschet() override {
		cout << "Raschet name`s of the country length + team number" << country.length() + team_number << endl;
	}
	void output()override {
		cout << setw(20) << "Name" << setw(17) << "Age" << setw(5) << endl << name << setw(20) << age << setw(17) << endl;
		cout << setw(20) << "Sport`s name" << setw(17) << "Level info" << endl << sportname << setw(20) << level << setw(17) << endl;
		cout << "Class team_member:" << endl << setw(20) << "Contry" << setw(17) << "Team number" << endl << country << setw(20) << team_number << setw(17) << endl;
	}
	~hockey_player() {};
};

int get_int();

float get_float();

void set_human(human&);

void set_skater(skater&);

void set_sportsman(sportsman&);

void set_hockey_player(hockey_player&);

void set_sportsman(sportsman& sportsman, string sportname);

int main() {
	sportsman* sportsmen;
	skater* skaters;
	hockey_player* hockey_players;
	int size2, size1,size3, com, check = 0;
	do {
		check = 0;
		cout << "How many sportsmen would u like to create? " << endl;
		size1 = get_int();
		try {
			sportsmen = new sportsman[size1];
		}
		catch (bad_alloc) {
		return -1;
			
		}
	} while (check);
	for (int i = 0; i < size1; i++) {
		cout << "Would u like to inicialize sportsman number " << i + 1 << "? (1-yes, 0-no) " << endl;
		com = get_int();
		if (com == 1) set_sportsman(sportsmen[i]);
	}
	
	do {
		check = 0;
		cout << "How many skaters would u like to create? " << endl;
		size2 = get_int();
		try {
			skaters= new skater[size2];
		}
		catch (bad_alloc) {
			cout << "Not enough memory." << endl;
			delete[]sportsmen;
			 return -1; 
		}
	} while (check);

	for (int i = 0; i < size2; i++) {
		cout << "Would u like to inicialize skater number " << i + 1 << "? (1-yes, 0-no) " << endl;
		com = get_int();
		if (com == 1) set_skater(skaters[i]);
	}

	do {
		check = 0;
		cout << "How many hockey players would u like to create? " << endl;
		size3 = get_int();
		try {
			hockey_players = new hockey_player[size3];
		}
		catch (bad_alloc) {
			cout << "Not enough memory " << endl;
			delete[] sportsmen; delete[] skaters;
			 return -1; 
		}
	} while (check);
	for (int i = 0; i < size2; i++) {
		cout << "Would u like to inicialize hockey player number " << i + 1 << "? (1-yes, 0-no) " << endl;
		com = get_int();
		if (com == 1) set_hockey_player(hockey_players[i]);
	}
	human* fun;
	for (int i = 0; i < size1; i++) {
		fun = &sportsmen[i];
		fun->output();
		fun->raschet();
	}
	for (int i = 0; i < size2; i++) {
		fun = &skaters[i];
		fun->output();
		fun->raschet();
	}
	for (int i = 0; i < size3; i++) {
		fun = &hockey_players[i];
		fun->output();
		fun->raschet();
	}
	delete[] skaters, hockey_players, sportsmen;
}




int get_int() {
	int perem;
	while (true) {
		cin >> perem;
		if (cin.fail() || perem < 0) {
			cin.clear();
			cin.ignore(32767, '\n');
			cout << " This input is invalid. Enter once again" << endl;
		}
		else {
			cin.ignore(32767, '\n');
			return perem;
		}
	}
};

float get_float() {
	float perem;
	while (true) {
		cin >> perem;
		if (cin.fail() || perem < 0 || perem>1) {
			cin.clear();
			cin.ignore(32767, '\n');
			cout << " This input is invalid. Enter once again" << endl;
		}
		else {
			cin.ignore(32767, '\n');
			return perem;
		}
	}
};
void set_human(human& human) {
	int age;
	string name;
	cout << "Input human`s age" << endl;
	do {
		age = get_int();
		if (age < 100 && age>18)break;
		else cout << "Sorry, I don`t believe u, try once again " << endl;
	} while (true);
	cout << "Input human`s name" << endl;
	cin >> name;
	human.set_name(name);
}
void set_skater(skater& skater) {
	float skill;
	int experience;
	set_human(skater);
	cout << "Input Karl`s skater skill(from 0 to 1) " << endl;
	skill = get_float();
	skater.set_skill(skill);
	cout << "Input Karl`s skater yaers of experience " << endl;
	do {experience = get_int(); if (experience > skater.get_age() - 2)cout << "Impossible, try once again" << endl; else break;
	} while (true);
	skater.set_experience(experience);
}
void set_sportsman(sportsman& sportsman) {
	int level;
	string sportname;
	set_human(sportsman);
	cout << "Input sportman`s sport level (from 0 to 10)" << endl;
	do {
		level = get_int();
		if (level < 10)break;
		else cout << "Oh no, try once again " << endl;
	} while (true);
	sportsman.set_level(level);
	cout << "Input soprtname" << endl;
	cin >> sportname;
	sportsman.set_sportname(sportname);
};

void set_sportsman(sportsman& sportsman, string sportname) {
	int level;
	cout << "Input sportman`s sport level (from 0 to 10)" << endl;
	do {
		level = get_int();
		if (level < 10)break;
		else cout << "Oh no, try once again " << endl;
	} while (true);
	sportsman.set_sportname(sportname);
};

void set_hockey_player(hockey_player& hockey_player) {
	int team_number;
	string country;
	set_sportsman(hockey_player, "Hockey");
	cout << "Input team_member`s team number " << endl;
	team_number = get_int();
	hockey_player.set_team_number(team_number);
	cout << "Input team_member`s team country" << endl;
	cin >> country;
	hockey_player.set_country(country);
}
